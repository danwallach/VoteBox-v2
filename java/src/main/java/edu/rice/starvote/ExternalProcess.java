package edu.rice.starvote;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Utility methods to spawn external processes and capture their output.
 *
 * @author luejerry
 */
public final class ExternalProcess {

    /**
     * Spawn the specified child process without capturing its output. The child process inherits the working
     * directory of the current Java process. Does not wait for the child process to complete.
     *
     * ##### Example
     * `runOnly("rm", "-rf", "/home/*")`
     *
     * @param args Command line to execute, comma-separated by arguments.
     * @throws IOException If an I/O error occurs starting the process.
     */
    public static void runOnly(String... args) throws IOException {
        runInDir(null, args);
    }

    /**
     * Spawn the specified child process without capturing its output, using the specified working directory. Does not
     * wait for the child process to complete.
     *
     * ##### Example
     * `runInDir(new File("/home/bin"), "touch", "touched.txt")`
     *
     * @param wd Working directory of child process.
     * @param args Command line to execute, comma-separated by arguments.
     * @throws IOException If an I/O error occurs starting the process.
     */
    public static void runInDir(File wd, String... args) throws IOException {
        final ProcessBuilder pfac = new ProcessBuilder(args);
        pfac.directory(wd);
        pfac.start();
    }

    /**
     * Spawn the specified child process and capture its standard output and standard error, using the specified
     * working directory. Blocks until child process is complete.
     *
     * ##### Example
     * `String result = runInDirAndCapture(new File("/dev"), "ls", "-l")`
     *
     * @param wd Working directory of child process.
     * @param args Command line to execute, comma-separated by arguments.
     * @return All standard output and error generated by child process.
     * @throws IOException If an I/O error occurs starting the process or reading its output.
     */
    public static String runInDirAndCapture(File wd, String... args) throws IOException {
        final ProcessBuilder pfac = new ProcessBuilder(args);
        pfac.directory(wd);
        pfac.redirectErrorStream(true);
        final Process process = pfac.start();
        return getStdout(process);
    }

    /**
     * Spawn the specified child process and capture its standard output and standard error. The child process inherits
     * the working directory of the current Java process. Blocks until child process is complete.
     *
     * ##### Example
     * `String result = runAndCapture("ls", "-l")`
     *
     * @param args Command line to execute, comma-separated by arguments.
     * @return All standard output and error generated by child process.
     * @throws IOException If an I/O error occurs starting the process or reading its output.
     */
    public static String runAndCapture(String... args) throws IOException {
        return runInDirAndCapture(null, args);
    }

    /**
     * Helper method to capture the standard output of a process. This does not return until the process completes
     * (EOF on stdout).
     * @param process Process to capture standard output.
     * @return Standard output of process.
     * @throws IOException If I/O error occurs while reading.
     */
    private static String getStdout(Process process) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder builder = new StringBuilder();
        String line;
        while ( (line = reader.readLine()) != null) {
            builder.append(line);
            builder.append(System.getProperty("line.separator"));
        }
        return builder.toString();
    }
}
